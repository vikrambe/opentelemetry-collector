processors:
  # The following example demonstrates inserting keys/values into spans.
  attributes/insert:
    actions:
      # The following inserts a new attribute {"attribute1": 123} to spans where
      # the key "attribute1" doesn't exist.
      # The type of `attribute1` is inferred by the configuration.
      #  `123` is an integer and is stored as an integer in the attributes.
      # This demonstrates how to backfill spans with an attribute that may
      # not have been sent by all clients.
      - key: "attribute1"
        value: 123
        action: insert
      # The following uses the value from attribute "anotherkey" to insert a new
      # attribute {"string key": <value from attribute "anotherkey">} to spans
      # where the key "string key" does not exist. If the attribute "anotherkey"
      # doesn't exist, no new attribute is inserted to spans.
      - key: "string key"
        from_attribute: "anotherkey"
        action: insert

  # The following demonstrates configuring the processor to only update existing
  # keys in an attribute.
  # Note: `action: update` must be set.
  attributes/update:
    actions:
      # The following updates the attribute 'boo' using the value from attribute
      # 'foo'. Spans without the attribute 'boo' will not change.
      - key: "boo"
        from_attribute: "foo"
        action: update
      # The following updates the attribute to { "db.secret": "redacted"}.
      # This demonstrates sanitizing spans of sensitive data.
      - key: db.secret
        value: redacted
        action: update

  # The following demonstrates setting an attribute on both spans where the
  # key does exist and the key doesn't exist.
  attributes/upsert:
    actions:
      # The following demonstrates how to set an attribute on all spans.
      # Any spans that already had `region` now have value `planet-earth`.
      # This can be done to set properties for all traces without
      # requiring an instrumentation change.
      - key: region
        value: "planet-earth"
        action: upsert

      # The following demonstrates copying a value to a new key.
      # Note: If a span doesn't contain `user_key`, no new attribute `new_user_key`
      # is created.
      - key: new_user_key
        from_attribute: user_key
        action: upsert

  # The following demonstrates deleting keys from an attribute.
  attributes/delete:
    actions:
      - key: credit_card
        action: delete
      - key: duplicate_key
        action: delete


  # The following demonstrates excluding spans from this attributes processor.
  # Ex. The following spans match the properties and won't be processed by the
  # processor.
  # Span1 Name: 'svcB' Attributes: {env: dev, test_request: 123, credit_card: 1234}
  # Span2 Name: 'svcA' Attributes: {env: dev, test_request: false}
  # The following spans do not match the properties and the processor actions
  # are applied to it.
  # Span3 Name: 'svcB' Attributes: {env: 1, test_request: dev, credit_card: 1234}
  # Span4 Name: 'svcC' Attributes: {env: dev, test_request: false}
  attributes/excludemulti:
    # Specifies the spans properties that exclude a span from being processed.
    exclude:
      # The Span service name must either be "svcA" or "svcB" to match.
      services: ["svcA", "svcB"]
      attributes:
        # This exact attribute ('env', 'dev') must exist in the span for a match.
        - {key: env, value: "dev"}
        # As long as there is an attribute with key 'test_request' in the span
        # there is a match.
        - {key: test_request}
    actions:
      - key: credit_card
        action: delete
      - key: duplicate_key
        action: delete

  # The following demonstrates including spans for this attributes processor.
  # All other spans that do no match the properties are not processed
  # by this processor.
  # Ex. The following are spans match the properties and the actions are applied.
  # Span1 Name: 'svcB' Attributes: {env: dev, test_request: 123, credit_card: 1234}
  # Span2 Name: 'svcA' Attributes: {env: dev, test_request: false}
  # Span3 Name: 'svcB' Attributes: {env: 1, test_request: dev, credit_card: 1234}
  # The following span does not match the include properties and the
  # processor actions are not applied.
  # Span4 Name: 'svcC' Attributes: {env: dev, test_request: false}
  attributes/includeservices:
    # Specifies the span properties that must exist for the processor to be applied.
    include:
      # The Span service name must either be "svcA" or "svcB" to match.
      services: ["svcA", "svcB"]
    actions:
      - key: credit_card
        action: delete
      - key: duplicate_key
        action: delete

  # The following demonstrates specifying the set of span properties to
  # indicate which spans this processor should be applied to. The `include` of
  # properties say which ones should be included and the `exclude` properties
  # further filter out spans that shouldn't be processed.
  # Ex. The following are spans match the properties and the actions are applied.
  # Note this span is processed because the value type of redact_trace is a string instead of a boolean.
  # Span1 Name: 'svcB' Attributes: {env: production, test_request: 123, credit_card: 1234, redact_trace: "false"}
  # Span2 Name: 'svcA' Attributes: {env: staging, test_request: false, redact_trace: true}
  # The following span does not match the include properties and the
  # processor actions are not applied.
  # Span3 Name: 'svcB' Attributes: {env: production, test_request: true, credit_card: 1234, redact_trace: false}
  # Span4 Name: 'svcC' Attributes: {env: dev, test_request: false}
  attributes/selectiveprocessing:
    # Specifies the span properties that must exist for the processor to be applied.
    include:
      # The Span service name must either be "svcA" or "svcB" to match.
      services: ["svcA", "svcB"]
    exclude:
      attributes:
        - { key: redact_trace, value: false}
    actions:
      - key: credit_card
        action: delete
      - key: duplicate_key
        action: delete

  # The following demonstrates how to backfill spans missing an attribute,
  # insert/update that value to a new key and deleting the old key. This guarantees
  # an attribute `svc.operation` exists in spans and the attribute `operation`
  # doesn't exist.
  # Ex: The spans before the processor `attributes/complex`.
  # Span1 Attributes: {timeout: 10, svc.operation: addition, operation: addition}
  # Span2 Attributes: {operation: subtract, math_value: 123}
  # Span3 Attributes: {timeout: 10, math_value: 4}
  # Span4 Attributes: {svc.operation: division, timeout: 3}
  attributes/complex:
    # Note: There are no include and exclude settings so all spans are processed.
    actions:
      - key: operation
        value: default
        action: insert
      # The spans after the first action of insert.
      # Span1 Attributes: {timeout: 10, svc.operation: addition, operation: addition}
      # Span2 Attributes: {operation: subtract, math_value: 123}
      # Span3 Attributes: {timeout: 10, math_value: 4, operation: default}
      # Span4 Attributes: {svc.operation: division, timeout: 3, operation:default}

      - key: svc.operation
        from_attribute: operation
        action: upsert
      # The spans after the second action of upsert.
      # Span1 Attributes: {timeout: 10, svc.operation: addition, operation: addition}
      # Span2 Attributes: {svc.operation: subtract, operation: subtract, math_value: 123}
      # Span3 Attributes: {svc.operation: default, timeout: 10, math_value: 4, operation: default}
      # Span4 Attributes: {svc.operation: default, timeout: 3, operation:default}

      - key: operation
        action: delete
      # The spans after the third/final action of delete.
      # Span1 Attributes: {timeout: 10, svc.operation: addition}
      # Span2 Attributes: {svc.operation: subtract, math_value: 123}
      # Span3 Attributes: {svc.operation: default, timeout: 10, math_value: 4}
      # Span4 Attributes: {svc.operation: default, timeout: 3}

  # The following is an example of various actions. The actions are applied in
  # the order specified in the configuration.
  attributes/example:
    actions:
      - key: db.table
        action: delete
      - key: redacted_span
        value: true
        action: upsert
      - key: copy_key
        from_attribute: key_original
        action: update
      - key: account_id
        value: 2245
        action: insert
      - key: account_password
        action: delete

  # The following demonstrates how to process spans that have a specified service name and
  # span name that matches the regexp pattern. This processor will remove "token" attribute
  # and will obfuscate "password" attribute in spans where service name is "auth"
  # and where span name does not match "login.*".
  attributes/regexp:
    # Specifies the span properties that must exist for the processor to be applied.
    include:
      # The span service name must be "auth".
      services: ["auth"]
    exclude:
      # The span name must not match "login.*" pattern.
      span_names: ["login.*"]
    actions:
      - key: password
        action: update
        value: "obfuscated"
      - key: token
        action: delete

receivers:
  examplereceiver:

exporters:
  exampleexporter:

service:
  pipelines:
    traces:
      receivers: [examplereceiver]
      processors: [attributes/insert]
      exporters: [exampleexporter]


